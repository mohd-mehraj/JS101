window object:
The window object represent an open window in a browser. it is browser's object(not javascript's)
& is automatically created by browser.
It is a Global object with lots of properties & methods.

What is DOM?
when a web page is loaded, the browser create a Document object model(DOM) of the page.
simply means - (HTML ko javascript me access karne ke tarika hai DOM)

we use DOM for dynamic changes/manipulation in our web page.

#code::
console.log -> it is use to print - it is use to print object as an element like h1, paragraph, etc.
console.dir -> Document -> properties/methods
it is used to print special objects of properties and method 


DOM manipulation (for Elements):

1. Selecting with Id - 
    document.getElementById("myId");

    NOTE: "Id should be unique for each elements. it is represent by '#'. "

2. Selecting with Class - 
   document.getElementByClassName("myClass");
   it is return a HTML collection.

3. Selecting with tag -
   document.getElementsByTagName("p"); 


4. Query Selector - it will return NodeList

document.querySelector("#myId/.myClass/tag") //for id use = '#', for class use '.'
//return first element

document.querySelectorAll("#myId/.myClass/tag")
//return a NodeList(all elements).


properties:

tagName: return tag for element Node.
innerText: return the text content of the element and all its children.
innerHTML: return the plain text or HTML content in the element.
textContent: return textual content even for hidden elements.


DOM manipulation (for Attributes):

Attributes:
1. getAttribute("attr") //to get the attribute value 
eg. <p class="para">this is a class</p> - here the element is p and the attribute is class. and it is use access the class attribute.


2. setAttribute(attr, value) //to set attribute value or to change the attribute value 
eg. para.setAttribute("class", "newClass");


DOM manipulation (for style):

node.style - to change the style value of the element. "here node means element"

eg.
let paragraph = document.querySelector('p');
paragraph.style.color = "blue";
paragraph.style.fontSize = "20px";


DOM manipulation for create/insert a new element :

insert/create a new Elements : 
(1) first create it. 
(2) add it.

let el = document.createElement("div"); - here using document.createElement we are create a div element

(1) node.append(el) - adds at the end of node (inside) 
(2) node.prepend(el) - adds at the start of node (inside)
(3) node.before(el) - adds before the node(outside) 
(4) node.after(el) - adds after the node(outside)

* NOTE - node means element

example (1) -

//create 
let newBtn = document.createElement("button");
newBtn.innerText = "click me";

//add
let div = document.querySelector("div"); //access
div.append(newBtn); // it will be add at the end of the div.
 
example (2) -

//create 
let NewHeading = document.createElement("h2");
NewHeading.innerHTML = "<i>This is the new heading which is create in Javascript</i>";

//add
let newDiv = document.querySelector("body"); //access  
newDiv.prepend(NewHeading); //added



DOM manipulation - delete Element 

node.remove(); //remove the node


example - 
let para = document.querySelector("p"); //access the paragraph
para.remove(); //delete/remove the paragraph
 



appendChild(): 
Adds a child node to the end of a parent node.

example:

// create a new element 
const newEl = document.createElement("p");
newEl.innerText = "this is the new appendChild paragraph";

// append the new element as a child into the parent element  
const preEl = document.getElementById("myNode"); //access parent node/element
preEl.appendChild(newEl);


removeChild(): Removes a specified child node from a parent node.



example:

// select the parent element 
const temp = document.getElementById("myNode2");

// select the parent child element 
const temp2 = document.getElementById("new1");

// remove child element 
temp.removeChild(temp2);


classList:

classList property is used to manipulate the class attribute of an HTML element.


example:

//access the element 
const contents1 = document.querySelector("h1");

//add a class
contents1.classList.add("newContent");

// remove a class
contents1.classList.remove("newContent");



EVENTS:
------

The change in the state of an object is known as an event.
Events are fired to notify code of "interesting changes" that may affect code execution.

Mouse events(click, double click etc)
Keyboard events(keyPress, keyUp, keyDown)
Form events(submit etc)
print event & many more.


Inline Event Handling:
---------------------
Inline event handling refers to adding event listeners directly in HTML elements using attributes. 

example:
<button onclick="alert('Button clicked!')">Click me</button>


Event Handling:
---------------
It allows you to respond to user actions or system events in your web applications.

syntax:
         node.event = () => {   // node means DOM element
            //handle here
         }

example:

const btn1 = document.getElementById("btn1"); //access btn

//onclick event on button 
btn1.onclick = () => {
    console.log("btn1 was clicked");
}

NOTE: 
(1) If we have handled our events in an in-line manner and have handled the events inside our JavaScript, then among them the priority is of the JavaScript one and not of the in-line one.
(2) If we handle an event once, like onclick event, then we cannot handle the onclick event again. If we do this, then the old onclick code will be overridden with the new one.



Event Object: 
------------
It contains information about the event that occurred and is automatically passed to event handler functions.
It provides detailed information about events.

* we often pass the event object as an argument to the event handler function. This allows us to access information about the event that occurred.

All event handlers (onclick, onmouseover etc.) have access to the event objects properties and method

syntax:    
         node.event = (e) => {
          //handle here
         }

// event properties

(1) e.target // Element that triggered the event
(2) e.type   // Type of the event
(3) e.clientX // Mouse coordinates
(4) e.clientY // Mouse coordinates

// event method 
 e.preventDefault();  // Prevent form submission
 e.stopPropagation(); // Stop event bubbling


example: 

const btn1 = document.getElementById("btn1"); //access button

// onclick event handling, e is a event object 
btn1.onclick = (e) => {
    console.log("clicked"); 
    console.log(e.type); //event properties
    console.log(e.target);
    console.log(e.clientX, e.clientY);
}


Event listeners:
---------------
An event listener is a function that responds to specific events (like clicks or key presses) on a DOM element, executing code when those events occur.


addEventListener:

syntax:
element.addEventListener(event, eventHandlerFunction);


example:

const button = document.querySelector("button");

button.addEventListener('click', function(event) {
    console.log("Button was clicked!", event.target);
});


removeEventListener:

Syntax:
element.removeEventListener(event, eventHandlerFunction);

*NOTE: the eventHandlerFunction reference should be same to remove.


example:

const btn1 = document.querySelector("#btn1");

//addEventListener
btn1.addEventListener("click",  (event) => {
    console.log("button was clicked - handler1");
})

const handler2 = () => {
    console.log("button was clicked - handler2");   //the function which we want to remove. we have to store that function in the variable. 
}
btn1.addEventListener("click",handler2) //variable pass as eventHandler which is hold the function

//removeEventListener
btn1.removeEventListener("click", handler2) 

